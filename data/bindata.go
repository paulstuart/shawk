// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// ../data/schema/flows.sql
package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _DataSchemaFlowsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x4b\x8f\x9b\x30\x14\x85\xf7\xfc\x8a\xbb\x03\x24\x16\x59\xb4\xab\xa8\x23\x51\x72\xd3\xa2\x21\x4c\xca\x43\x9a\xac\x2c\x0f\xb8\xa9\xa5\x09\x20\xe3\xa4\xfd\xf9\x95\x1f\x84\xd0\x84\x28\x55\x9b\x4d\x90\x7c\xce\xb9\x0f\x7f\x8e\x32\x0c\x0b\x84\x62\xb7\x45\xf8\xfe\xde\xfe\x24\x35\x17\xac\x92\xbc\x6d\x20\xcc\x01\xd3\x72\x03\x9e\x4b\x2b\xc9\x4f\xcc\x0d\xc0\xed\x68\xdf\xab\x4f\x7f\xe9\x38\x83\x35\xfc\x9c\x20\xc4\x6b\x48\x5f\x0a\xc0\xd7\x38\x2f\x72\x68\xda\x9a\xf5\xe0\x39\x00\xa0\xbf\x09\xaf\xe1\x8d\xef\x7b\x26\x38\x7d\xd7\xc2\xb4\x4c\x12\xd8\x66\xf1\x26\xcc\x76\xf0\x8c\xbb\x40\x6b\x79\x77\xfa\xa0\xff\x1b\x26\xcf\x32\x73\xd4\xb5\x42\x9a\x23\xc9\xf6\x4c\x8c\x21\xd1\x57\x8c\x9e\xc1\xd3\xe7\x4f\x9f\x60\xe1\x5b\x3d\xaf\xe1\xae\x9e\xd7\x46\x0e\x2b\x5c\x87\x65\x52\xc0\xc2\x1a\xf7\xc6\x39\x6b\xdc\xcf\x3a\x1b\x7a\x60\x00\x70\xa2\xa2\xfa\x41\x85\xf7\x71\xe1\x8f\xee\x41\xeb\xba\x81\xa3\xd5\x65\x1a\x7f\x2b\x11\x3c\x35\x73\xa0\xc7\x0b\x54\xd3\xbe\xe3\x2f\x87\xd5\x5a\x49\x9c\xae\xf0\xf5\xd6\x86\x89\xf2\x12\x65\x25\x6a\x9c\x97\xd4\x2e\xbe\xcc\xe3\xf4\x0b\xbc\x49\xc1\xd8\x75\xfe\x39\x7d\x3e\xd6\x0c\x72\x3b\x4e\x9f\x3d\x12\x62\x7a\xbb\x93\x64\x1b\xb3\x79\xf7\x70\x52\x60\x0e\x38\x69\x48\xed\xdd\x5e\xfe\x1e\xc1\x6b\x64\x7b\xfa\xfb\x03\xfc\x29\x78\x7d\x7b\x14\x15\x23\x03\xc6\x97\x05\x79\x33\x52\x0a\x19\xae\x31\xc3\x34\xc2\x33\xfe\xd6\xe2\xab\xf9\x57\x98\x60\x81\x10\x85\x79\x14\xae\xd0\xb6\xc3\x7a\xc9\x1b\xaa\x6a\x4e\xe2\xff\x3d\xb9\x6a\x9b\xc6\x0c\xd3\x4f\x06\x9d\x63\xfa\x52\xff\x74\x7e\x42\x95\x60\x54\xb2\xeb\x55\x4b\x7e\x60\xbd\xa4\x87\xee\x9a\xee\xa8\xcc\x32\x4c\x0b\x52\xc4\x1b\xcc\x8b\x70\xb3\x35\x49\xc7\xae\xfe\x0f\x49\x93\x67\x33\xbd\x96\xe0\xd6\x32\x83\xf1\xc2\x1f\x7c\x55\x1a\x34\x62\xa3\x55\xe2\x48\x05\xe1\xf5\x2f\xb5\x6e\xc3\xe2\x04\xe4\xbf\x6c\xe5\xee\xdb\x31\x1d\xe8\xd2\x36\x76\xbe\xee\xcd\x3a\xd3\x66\xfc\xa5\xf3\x3b\x00\x00\xff\xff\xbc\x46\x51\x11\xe2\x05\x00\x00")

func DataSchemaFlowsSqlBytes() ([]byte, error) {
	return bindataRead(
		_DataSchemaFlowsSql,
		"../data/schema/flows.sql",
	)
}

func DataSchemaFlowsSql() (*asset, error) {
	bytes, err := DataSchemaFlowsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../data/schema/flows.sql", size: 1506, mode: os.FileMode(420), modTime: time.Unix(1561552348, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../data/schema/flows.sql": DataSchemaFlowsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"schema": &bintree{nil, map[string]*bintree{
				"flows.sql": &bintree{DataSchemaFlowsSql, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
