// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// ../data/schema/flows.sql
package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _DataSchemaFlowsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xc1\x8e\x9b\x30\x10\xbd\x23\xf1\x0f\x73\x0b\x48\x1c\xf6\xd0\x5b\xd5\x95\x5c\x98\xb4\x68\xc1\x9b\x82\x91\x36\x27\x8b\x05\x77\x65\x69\x17\x10\xf6\x6e\xfb\xf9\x95\x8d\x09\x21\x4d\xd4\x54\x8a\x2f\x09\x9a\x99\xf7\xde\xbc\x79\x71\x81\x84\x21\xb0\xfd\x0e\xe1\xe7\x6b\xff\x8b\xb7\x72\x14\x8d\x96\x7d\x07\xa4\x04\xa4\x55\x0e\xc1\xa6\x6e\xb4\xfc\x10\x9b\x08\x36\x43\xad\x94\xf9\x1b\x7e\xf6\x3d\xdf\x9b\x87\xc9\xd7\x0c\x21\xdd\x02\x7d\x64\x80\x4f\x69\xc9\x4a\xe8\xfa\x56\x28\x08\x7c\x0f\x00\xec\x07\x97\x2d\x3c\xcb\x17\x25\x46\x59\xbf\xda\x4e\x5a\x65\x19\xec\x8a\x34\x27\xc5\x1e\x1e\x70\x1f\x4d\xcd\x72\xf8\xf8\x64\x7f\x3b\xa1\x0f\x7d\xae\x36\xf4\xa3\x9e\x6a\x5a\xbc\x88\x71\x81\x89\xbf\x63\xfc\x00\x81\xad\xdf\x7f\x81\xbb\xd0\xf7\x8c\x44\x27\xb0\xa2\xe9\x8f\x0a\x21\xa5\x09\x3e\x9d\xd3\xc9\x0d\x27\xb7\xc3\x8f\xd4\x49\xaf\xca\x94\x7e\x83\x67\x3d\x0a\x01\x81\xa9\x47\x96\xfd\x9f\x8b\x1b\x13\x0f\x8b\x5b\x47\x65\x0b\xa7\xef\x2a\x23\x96\x4b\xac\xdf\xc9\x99\x4e\x2c\x52\xfd\xfb\xd8\x08\x3e\x5b\x7e\x4c\x29\xbb\xc5\x50\x28\x70\x8b\x05\xd2\x18\x0f\xb7\x72\x23\xa1\xf1\x20\xc1\x0c\x19\x42\x4c\xca\x98\x24\x38\x0b\x12\x4a\xcb\xae\x36\xac\x2b\xfc\x1b\x40\x37\x7d\xd7\x4d\xfb\xa8\xd5\xae\x97\x0e\x7d\xdc\x7f\x0f\x77\xe1\x0c\x33\x8a\x5a\x8b\xbf\xfd\xd6\xf2\x4d\x28\x5d\xbf\x0d\x0b\x50\x82\x5b\x52\x65\x0c\xe2\xaa\x28\x90\x32\xce\xd2\x1c\x4b\x46\xf2\x9d\x83\x7a\x1f\xda\x5b\x40\x4d\x60\x2e\x80\xc1\xfa\x38\xd1\x39\x47\xa3\xe5\xee\x57\x87\xd8\x66\x8e\x3b\x70\x83\xb9\xc4\x83\xcb\xf6\xb7\x71\x7d\x8a\xe5\x2a\xd4\xff\x29\x66\x51\x72\x59\x82\xe5\x76\xb8\x97\x89\xcf\x12\xad\xd5\x18\xb6\x3f\x01\x00\x00\xff\xff\xd5\xd0\x96\x59\x9b\x04\x00\x00")

func DataSchemaFlowsSqlBytes() ([]byte, error) {
	return bindataRead(
		_DataSchemaFlowsSql,
		"../data/schema/flows.sql",
	)
}

func DataSchemaFlowsSql() (*asset, error) {
	bytes, err := DataSchemaFlowsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../data/schema/flows.sql", size: 1179, mode: os.FileMode(420), modTime: time.Unix(1555776771, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../data/schema/flows.sql": DataSchemaFlowsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"schema": &bintree{nil, map[string]*bintree{
				"flows.sql": &bintree{DataSchemaFlowsSql, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
