// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// ../data/schema/flows.sql
package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _DataSchemaFlowsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\xc1\x8e\x9b\x30\x10\xbd\xf3\x15\x73\x03\x24\x0e\x7b\x68\x4f\x51\x57\xa2\x64\xd2\xa2\x25\x6c\x0a\x46\xda\x9c\x2c\x2f\xb8\xa9\xa5\x0d\x20\xe3\x4d\xfb\xf9\x95\x6d\x08\xeb\x34\x49\xb3\x6a\x7d\x01\x69\xde\xbc\x79\x1e\xbf\x97\x14\x18\x13\x04\xb2\xdd\x20\x7c\x7f\xe9\x7e\xd2\x46\x48\x5e\x2b\xd1\xb5\x10\x97\x80\x79\xb5\x86\xc0\x67\xb5\x12\x07\xee\x47\xe0\xf7\x6c\x18\xf4\x6f\xb8\xf0\xbc\xa9\x35\xfe\x9c\x21\xa4\x2b\xc8\x1f\x09\xe0\x53\x5a\x92\x12\xda\xae\xe1\x03\x04\x1e\x00\x98\x7f\x2a\x1a\x78\x16\xbb\x81\x4b\xc1\x5e\x0c\x30\xaf\xb2\x0c\x36\x45\xba\x8e\x8b\x2d\x3c\xe0\x36\x32\x58\xd1\x1f\x3e\x98\x6f\xcb\xd5\x11\x66\x4b\x7d\x27\x95\x2d\x29\xbe\xe3\x72\x26\x49\xbe\x62\xf2\x00\x81\xa9\xdf\x7f\x82\xbb\x70\xc4\xef\x44\x73\x15\xaf\xeb\x06\x0f\x4b\x5c\xc5\x55\x46\xe0\x6e\xec\x6c\xd9\x9e\x03\xc0\x81\xc9\xfa\x07\x93\xc1\xc7\xbb\x70\xee\x9e\xb0\xbe\x6f\xc1\xb5\xe4\x4c\xf1\x06\x94\xd8\xf3\x41\xb1\x7d\xff\x27\x34\xa9\x8a\x02\x73\x42\x49\xba\xc6\x92\xc4\xeb\x4d\xe4\x99\xd6\x2a\x4f\xbf\x55\x08\x81\xbe\x74\x64\xee\x17\x19\xd5\x91\x55\x10\x7a\xe1\x62\xda\xf1\x08\x4d\xf3\x25\x3e\x9d\x5b\x35\xd5\x1c\x54\x53\x50\xd3\x4b\x45\xf3\x0b\x1e\xf3\xf1\x1d\xaa\x32\xcd\xbf\xc0\xb3\x92\x9c\x5f\x9e\x76\x9c\x75\x79\xc8\xdf\xa8\x4d\x3d\x9a\x56\x72\x0b\xa3\x95\x7d\x9b\xe2\x53\xf2\x6b\xfe\xd3\x4e\x9e\xfc\x67\x5c\x6d\xbd\xe0\x9c\x5b\xfc\x38\x87\xc1\x3d\x27\x49\x71\x9d\x3a\x74\xaf\xb2\xe6\x74\xf2\xfd\xdb\x81\xa2\x9d\x6d\x0d\x05\xae\xb0\xc0\x3c\xc1\x63\x5e\xc6\x96\x50\x2f\x62\x89\x19\x12\x84\x24\x2e\x93\x78\x89\xa3\x1c\x3e\x28\xd1\x32\x3d\xd3\xa1\xff\x77\xe6\xba\x6b\x5b\x7b\x99\xc1\xb9\xe8\xa5\xf4\xbc\xc5\xdf\x1f\x33\x37\x85\xe1\xf4\xbc\x2f\x1c\xba\xe3\xb5\x6f\xfe\x03\x93\x13\x33\xf7\x59\xa2\x73\xcb\x8c\xe6\x07\xbf\x31\x7d\xc6\x68\x74\xa4\xd6\x8c\xb3\x2b\x26\x47\x5b\x2f\x3a\x8e\x7e\xa7\x94\xab\x41\xb2\x0a\xcc\xe8\x91\xf6\xf2\xdc\xb3\x73\x5c\x31\xe1\xc2\xfb\x1d\x00\x00\xff\xff\x6f\xe5\xc9\x2c\x13\x06\x00\x00")

func DataSchemaFlowsSqlBytes() ([]byte, error) {
	return bindataRead(
		_DataSchemaFlowsSql,
		"../data/schema/flows.sql",
	)
}

func DataSchemaFlowsSql() (*asset, error) {
	bytes, err := DataSchemaFlowsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../data/schema/flows.sql", size: 1555, mode: os.FileMode(420), modTime: time.Unix(1562038831, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../data/schema/flows.sql": DataSchemaFlowsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"schema": &bintree{nil, map[string]*bintree{
				"flows.sql": &bintree{DataSchemaFlowsSql, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
